
####introduction to docker
public store for images = docker hub

read only template to create containers = image

each container has it's own [...] = root filesystem, processes, memory, devices, network ports

program that allows to built, ship and run containers = docker engine, docker daemon

docker engine uses ... and ... to integrate containers with Linux kernel = kernel namespaces and control groups

example namespaces = PID, NET, IPC, MNT, UTS

docker hello world = `sudo docker run hello-world`

docker GUI = kitematic

tool for provisioning  = docker machine
tool for clustering docker engines and scheduling containers = docker swarm
tool fto create and manage multi-container application =docker compose

display local images = `docker images`
what is the default tag when listing images = latest

create container  "Hello World" = `docker run ubuntu echo "Hello world!"`
how images are uniqaly versionized? = by `repository:tag`
example `repository:tag` = `krisu/app:1.0`

container with terminal = `docker run -it `

exiting container created with `-it` =  destroys container

how to exit container without destroying = `[ctrl + p + q]`

to view container id  = `docker ps`
to view all containers ( running, stopped) = `docker ps -a`

to run container as daemon ( detached mode)= `docker run -d `

to fetch logs from container? =`docker logs <container-id>`

to get logs from container dynamically = `docker logs -f <container-id>`

to publish all exposted container ports to random ports on host machine = `docker run -d -P tomcat:7`

container with 8080 webapp. What to expect with `-P` option = random port on host is mapped to 8080 `0.0.0.0:32768->8080/tcp`

####docker fundamentals

to save changes in container as a new image =  `docker commit`
full container saving = `docker commit <container-id> <repository:tag>`
what have onions, ogres and containers? = layers
containers contain layers, which could be = read-only and writeable

configuration file with instruction for building docker image = `dockerfile`
which is more effective `docker commit` or `dockerfile`? = `dockerfile`
dockerfile syntax for base image = `FROM ubuntu:14.04`
dockerfile syntax for command to execute = `RUN yum install vim`



how to build images = `docker build`
build an image with current folder as the context path = `docker build -t <repository:tag> .` note: dot
build an image with specific folder = `docker build -t <repository:tag> <specific-folder>`


How to aggregate multiple instructions inside Dockerfile? = via `&&`
Dockerfile keyword for command during running the container = `CMD`
Dockerfile `CMD` keyword. Which actions performed during building the image? = During building nothing. Actions during creation of container.
`CMD` keyword. Available formats are? =  shell and exec
EXEC format. = `CMD ["ping","127.0.0.1","-c","3"]`
EXEC format construction is ... = json table
SHELL format = `CMD ping 127.0.0.1 -c 3`
To delete container = `docker rm`
Before deleting container it must be = stopped
Executable container. Dockerfile keyword for actions when container is executed = `ENTRYPOINT`
Dockerfile `ENTRYPOINT` formats are = shell and exec. EXEC format preffered.
ENTRYPOINT example = `ENTRYPOINT ["ping"]`
How to use `ENTRYPOINT ["ping"]`? = `docker run container 127.0.0.1 -c 3`
To start container = `docker start `
To stop container = `docker stop `
To start another process within running container = `docker exec`
To start bash wihin `admiring_wilson` container = `docker exec -it admiring_wilson bash`
Exiting after running `docker exec -it admiring_wilson bash` destroys container. True/ False? = False, container is running


to delete docker images = `docker rmi`
to push image to DockerHub = `docker push <repo:tag>`
what is the condition to push repo to DockerHub = local repo must have same name and tag as the DockerHub repo

to rename local image repo = `docker tag image-id repo:tag`
`docker tag` on local image = `docker tag <image-id> <repo:tag>`
tag image on local repository = `docker tag <repo:tag> <dockerHub:tag>`
list info about container = `docker inspect `

#### volume



#### linking
metod for secure communication and secure data transfer is called = linking
how to set-up name for running container = `--name`, egsample `docker run -d --name dbms postgres`
How to run container and link it to other container = `--link dbms:db`
`--link dbms:db`. Which is alias, which is container to link? = container `dbms`, alias `db`
linking the containers create entry in file = `/etc/hosts`

#### networking
Dockerfile keyword for exposing ports to listen = `EXPOSE 80 443`
`-P` option to `docker run` will map exposed ports to ... = random HIGH ports on host
For manual port mapping use option = `-p` small
For automapping of ports use option = `-P` capital
Map port 80 of container to 8080 on host = `docker run -d -p 8080:80 nginx:1.7`